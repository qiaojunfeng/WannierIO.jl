var documenterSearchIndex = {"docs":
[{"location":"api/util/#Utility","page":"Utilities","title":"Utility","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Some simple convenience functions for development.","category":"page"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"CurrentModule = WannierIO","category":"page"},{"location":"api/util/#Contents","page":"Utilities","title":"Contents","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Pages = [\"util.md\"]\nDepth = 2","category":"page"},{"location":"api/util/#Index","page":"Utilities","title":"Index","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Pages = [\"util.md\"]","category":"page"},{"location":"api/util/#Fortran-related","page":"Utilities","title":"Fortran related","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Modules = [WannierIO]\nPages   = [\"util/fortran.jl\"]","category":"page"},{"location":"api/util/#WannierIO.isbinary-Tuple{AbstractString}","page":"Utilities","title":"WannierIO.isbinary","text":"isbinary(filename::AbstractString)\n\nCheck if the file is in binary format.\n\n\n\n\n\n","category":"method"},{"location":"api/util/#WannierIO.isbinary-Tuple{AbstractVector{UInt8}}","page":"Utilities","title":"WannierIO.isbinary","text":"isbinary(chars::Vector{UInt8})\n\nCheck if a sequence of chars is binary.\n\n\n\n\n\n","category":"method"},{"location":"api/util/#WannierIO.parse_bool-Tuple{AbstractString}","page":"Utilities","title":"WannierIO.parse_bool","text":"parse_bool(s::AbstractString)\n\nParse a string as bool.\n\nThis is capable of parsing Fortran outputs, e.g., .true., .false., true, T.\n\n\n\n\n\n","category":"method"},{"location":"api/util/#WannierIO.parse_bool-Tuple{Integer}","page":"Utilities","title":"WannierIO.parse_bool","text":"parse_bool(i::Integer)\n\nParse an integer as bool.\n\n0: false\n1 or -1: true\n\n\n\n\n\n","category":"method"},{"location":"api/util/#WannierIO.parse_float-Tuple{AbstractString}","page":"Utilities","title":"WannierIO.parse_float","text":"parse_float(s::AbstractString)\n\nParse a string as Float64.\n\nThe is capable of parsing Fortran outputs, e.g. 1.0D-10, to the ordinary 1e-10.\n\n\n\n\n\n","category":"method"},{"location":"api/util/#Lattice","page":"Utilities","title":"Lattice","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Modules = [WannierIO]\nPages   = [\"util/lattice.jl\"]","category":"page"},{"location":"api/util/#WannierIO.get_lattice-Tuple{StaticArraysCore.SMatrix{3, 3, T, 9} where T}","page":"Utilities","title":"WannierIO.get_lattice","text":"get_lattice(recip_lattice::Mat3)\n\nReturn lattice.\n\n\n\n\n\n","category":"method"},{"location":"api/util/#WannierIO.get_recip_lattice-Tuple{StaticArraysCore.SMatrix{3, 3, T, 9} where T}","page":"Utilities","title":"WannierIO.get_recip_lattice","text":"get_recip_lattice(lattice::Mat3)\n\nReturn reciprocal lattice.\n\n\n\n\n\n","category":"method"},{"location":"api/util/#Types","page":"Utilities","title":"Types","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Modules = [WannierIO]\nPages   = [\"common/type.jl\"]","category":"page"},{"location":"api/util/#WannierIO.Mat3","page":"Utilities","title":"WannierIO.Mat3","text":"3 x 3 matrix type.\n\nFor lattice and recip_lattice.\n\n\n\n\n\n","category":"type"},{"location":"api/util/#WannierIO.SymbolVec3","page":"Utilities","title":"WannierIO.SymbolVec3","text":"Pair type associating a Symbol with a Vec3.\n\nFor win file atoms_frac and kpoint_path.\n\n\n\n\n\n","category":"type"},{"location":"api/util/#WannierIO.Vec3","page":"Utilities","title":"WannierIO.Vec3","text":"Length-3 vector type.\n\nFor atom posistions, kpoints, etc.\n\n\n\n\n\n","category":"type"},{"location":"api/util/#Misc","page":"Utilities","title":"Misc","text":"","category":"section"},{"location":"api/util/","page":"Utilities","title":"Utilities","text":"Modules = [WannierIO]\nPages   = [\"util/header.jl\"]","category":"page"},{"location":"api/util/#WannierIO.default_header-Tuple{}","page":"Utilities","title":"WannierIO.default_header","text":"Default header for writing wannier90 files.\n\n\n\n\n\n","category":"method"},{"location":"api/convention/#Conventions","page":"Convention","title":"Conventions","text":"","category":"section"},{"location":"api/convention/#Units","page":"Convention","title":"Units","text":"","category":"section"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"In most cases, the units of the function arguments and returned values are in angstrom for lattice, and fractional (w.r.t. lattice) for atomic positions, etc.","category":"page"},{"location":"api/convention/#Variable-names","page":"Convention","title":"Variable names","text":"","category":"section"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"Here we list the common variable names used throughout the code and documentation. If you want to introduce a new variable that might be used widely, consider following the same style.","category":"page"},{"location":"api/convention/#length-of-quantities","page":"Convention","title":"length of quantities","text":"","category":"section"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"Prefixed by n_, indicating this is an integer specifying the length of some quantities; then followed by a short acronym of the quantity, to avoid typing long names repeatedly.","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"n_bands: number of bands\nn_wann: number of WFs\nn_kpts: number of kpoints\nn_bvecs: number of b-vectors\nn_atoms: number of atoms","category":"page"},{"location":"api/convention/#Matrices","page":"Convention","title":"Matrices","text":"","category":"section"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"U: unitary transformation matrices\nA: to differentiate between U, some times we use A specifically for the initial projection matrix, i.e., amn of Wannier90\nM: overlap matrices between neighboring kpoints, i.e., mmn of Wannier90\nE: energy eigenvalues, i.e., eig of Wannier90\nS: spin operator, i.e., spn of Wannier90\nR: the R-vectors used in Wannier interpolation","category":"page"},{"location":"api/convention/#Indices","page":"Convention","title":"Indices","text":"","category":"section"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"Usually, the returned quantities are Vectors of some types (Matrix{Float64}, Vector{Float64}, etc), and the indices follow the order of","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"kpoints\nb-vectors (if needed)\nbands\nWannier functions","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"For instance, the energy eigenvalues E is a length-n_kpts vector, with each element a length-n_bands vector of floats, i.e., E[ik][ib] is the ib-th eigenvalue at ik-th kpoint.","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"Here are some examples of indexing the vectors:","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"E[ik][m]\nU[ik][m, n]\nM[ik][ib][m, n]","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"where","category":"page"},{"location":"api/convention/","page":"Convention","title":"Convention","text":"ik: index of kpoints\nib: index of b-vectors\nm: index of bands\nn: index of Wannier functions","category":"page"},{"location":"api/qe/#Quantum-ESPRESSO-files","page":"Quantum ESPRESSO","title":"Quantum ESPRESSO files","text":"","category":"section"},{"location":"api/qe/","page":"Quantum ESPRESSO","title":"Quantum ESPRESSO","text":"CurrentModule = WannierIO","category":"page"},{"location":"api/qe/#Contents","page":"Quantum ESPRESSO","title":"Contents","text":"","category":"section"},{"location":"api/qe/","page":"Quantum ESPRESSO","title":"Quantum ESPRESSO","text":"Pages = [\"qe.md\"]\nDepth = 2","category":"page"},{"location":"api/qe/#Index","page":"Quantum ESPRESSO","title":"Index","text":"","category":"section"},{"location":"api/qe/","page":"Quantum ESPRESSO","title":"Quantum ESPRESSO","text":"Pages = [\"qe.md\"]","category":"page"},{"location":"api/qe/#Read","page":"Quantum ESPRESSO","title":"Read","text":"","category":"section"},{"location":"api/qe/","page":"Quantum ESPRESSO","title":"Quantum ESPRESSO","text":"Modules = [WannierIO]\nPages   = [\n    \"qe/band.jl\",\n    \"qe/xml.jl\",\n]","category":"page"},{"location":"api/qe/#WannierIO.guess_kpath-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T<:Real","page":"Quantum ESPRESSO","title":"WannierIO.guess_kpath","text":"guess_kpath(kpoints::AbstractMatrix{T}) where {T<:Real}\n\nGuess high symmetry points from kpoint coordinates.\n\nIf there is angle between two consecutive kpoints, then it is labeled as a high-symmetry point.\n\nArguments\n\nkpoints: (3, n_kpts), cartesian coordinates\n\n\n\n\n\n","category":"method"},{"location":"api/qe/#WannierIO.read_qe_band-Tuple{AbstractString}","page":"Quantum ESPRESSO","title":"WannierIO.read_qe_band","text":"read_qe_band(filename::AbstractString)\n\nread QE bands.x output data file.\n\nThe data file has format\n\n &plot nbnd=  20, nks=   380 /\n           -0.500000  0.500000  0.500000\n   -3.320   -0.666    5.173    5.173    7.994    9.725    9.725   14.147   16.993   16.993\n   17.841   17.841   17.902   19.666   25.961   26.563   28.186   28.186   28.368   28.368\n           -0.495000  0.495000  0.495000\n   -3.322   -0.664    5.173    5.173    7.994    9.725    9.725   14.148   16.980   16.980\n...\n\n\n\n\n\n","category":"method"},{"location":"api/qe/#WannierIO.read_qe_xml-Tuple{AbstractString}","page":"Quantum ESPRESSO","title":"WannierIO.read_qe_xml","text":"read_qe_xml(filename)\n\nRead atomic structure and band structure from QE's XML output.\n\nReturn\n\nlattice: 3 * 3, Å, each column is a lattice vector\natom_positions: 3 * n_atoms, fractional, each column is a position\natom_labels: n_atoms, each element is the label of the corresponding atom\nrecip_lattice: 3 * 3, Å⁻¹, each column is a reciprocal lattice vector\nkpoints: 3 * n_kpts, fractional, each column is a kpoint\nE: n_bands * n_kpts, eV. For spin-polarized but without SOC calculations,   return two arries of E_up and E_dn for the two spin channels.\nfermi_energy: eV\n\n\n\n\n\n","category":"method"},{"location":"#WannierIO.jl","page":"Home","title":"WannierIO.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for reading/writing Wannier90 related files.","category":"page"},{"location":"#Wannier90-files","page":"Home","title":"Wannier90 files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Input files:","category":"page"},{"location":"","page":"Home","title":"Home","text":"amn\nmmn\neig\nchk\nUNK\nspn","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also support parsing both plain text and binary formats (in Fortran language, called formatted and unformatted IO, respectively) for some files, e.g., chk and UNK.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Output files:","category":"page"},{"location":"","page":"Home","title":"Home","text":"*_band.dat\n*_tb.dat\nxsf\ncube\n...","category":"page"},{"location":"#Quantum-ESPRESSO-files","page":"Home","title":"Quantum ESPRESSO files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To support comparing Wannier-interpolated band structures with density function theory (DFT) bands, there are also some functions to parse Quantum ESPRESSO (QE) output files:","category":"page"},{"location":"","page":"Home","title":"Home","text":"xml\nbands.dat generated by QE bands.x","category":"page"},{"location":"api/volumetric/#Volumetric-data-files","page":"Volumetric data","title":"Volumetric data files","text":"","category":"section"},{"location":"api/volumetric/","page":"Volumetric data","title":"Volumetric data","text":"CurrentModule = WannierIO","category":"page"},{"location":"api/volumetric/#Contents","page":"Volumetric data","title":"Contents","text":"","category":"section"},{"location":"api/volumetric/","page":"Volumetric data","title":"Volumetric data","text":"Pages = [\"volumetric.md\"]\nDepth = 2","category":"page"},{"location":"api/volumetric/#Index","page":"Volumetric data","title":"Index","text":"","category":"section"},{"location":"api/volumetric/","page":"Volumetric data","title":"Volumetric data","text":"Pages = [\"volumetric.md\"]","category":"page"},{"location":"api/volumetric/#Read/write","page":"Volumetric data","title":"Read/write","text":"","category":"section"},{"location":"api/volumetric/","page":"Volumetric data","title":"Volumetric data","text":"Modules = [WannierIO]\nPages   = [\n    \"volume/xsf.jl\",\n    \"volume/bxsf.jl\",\n    \"volume/cube.jl\",\n]","category":"page"},{"location":"api/volumetric/#WannierIO.read_xsf-Tuple{AbstractString}","page":"Volumetric data","title":"WannierIO.read_xsf","text":"read_xsf(filename::AbstractString)\n\nRead xsf file.\n\nReturn\n\nprimvec: 3 * 3, Å, each column is a primitive lattice vector\nconvvec: 3 * 3, Å, each column is a conventional lattice vector\natoms: n_atoms String, atomic symbols or numbers\natom_positions: length-n_atoms vector, Å, cartesian coordinates\norigin: 3, Å, origin of the grid\nspan_vectors: 3 * 3, Å, each column is a spanning vector\nX: nx, fractional coordinate of grid points along the first spanning vector\nY: ny, fractional coordinate of grid points along the second spanning vector\nZ: nz, fractional coordinate of grid points along the third spanning vector\nW: nx * ny * nz, volumetric data\n\nnote: Note\nOnly support reading 1 datagrid in BLOCK_DATAGRID_3D.\n\n\n\n\n\n","category":"method"},{"location":"api/volumetric/#WannierIO.write_xsf-Union{Tuple{T}, Tuple{AbstractString, AbstractMatrix{T}, Array{StaticArraysCore.SVector{3, T}, 1}, AbstractVector{Int64}, AbstractVector{T}, AbstractMatrix{T}, AbstractArray{T, 3}}} where T<:Real","page":"Volumetric data","title":"WannierIO.write_xsf","text":"write_xsf(filename, lattice, atom_positions, atom_numbers, origin, span_vectors, W)\n\nWrite xsf file.\n\nArguments\n\nlattice: 3 * 3, Å, each column is a lattice vector\natom_positions: length-n_atoms vector, fractional coordinates\natom_numbers: n_atoms, atomic numbers\norigin: 3, Å, origin of the grid\nspan_vectors: 3 * 3, Å, each column is a spanning vector\nW: nx * ny * nz, volumetric data\n\n\n\n\n\n","category":"method"},{"location":"api/volumetric/#WannierIO.read_bxsf-Tuple{AbstractString}","page":"Volumetric data","title":"WannierIO.read_bxsf","text":"read_bxsf(filename::AbstractString)\n\nRead bxsf file.\n\nReturn\n\nfermi_energy: Fermi energy in eV\norigin: 3, Å⁻¹, origin of the grid\nspan_vectors: 3 * 3, Å⁻¹, each column is a spanning vector\nX: nx, fractional coordinate of grid points along the first spanning vector\nY: ny, fractional coordinate of grid points along the second spanning vector\nZ: nz, fractional coordinate of grid points along the third spanning vector\nE: n_bands * nx * ny * nz, eigenvalues at each grid point\n\n\n\n\n\n","category":"method"},{"location":"api/volumetric/#WannierIO.write_bxsf-Union{Tuple{T}, Tuple{AbstractString, T, AbstractVector{T}, AbstractMatrix{T}, AbstractArray{T, 4}}} where T<:Real","page":"Volumetric data","title":"WannierIO.write_bxsf","text":"write_bxsf(\n    filename::AbstractString,\n    fermi_energy::T,\n    origin::AbstractVector{T},\n    span_vectors::AbstractMatrix{T},\n    E::AbstractArray{T,4},\n) where {T<:Real}\n\nWrite bxsf file.\n\nArguments\n\nfermi_energy: Fermi energy in eV\norigin: 3, Å⁻¹, origin of the grid\nspan_vectors: 3 * 3, Å⁻¹, each column is a spanning vector\nE: n_bands * nx * ny * nz, eigenvalues at each grid point\n\n\n\n\n\n","category":"method"},{"location":"api/volumetric/#WannierIO.read_cube-Tuple{AbstractString}","page":"Volumetric data","title":"WannierIO.read_cube","text":"read_cube(filename::AbstractString)\n\nRead cube file.\n\nnote: Note\nBy default, cube use Bohr unit, here all returns are in Cartesian coordinates, Å unit.\n\n\n\n\n\n","category":"method"},{"location":"api/volumetric/#WannierIO.write_cube-Union{Tuple{T}, Tuple{AbstractString, AbstractMatrix{T}, AbstractVector{Int64}, AbstractVector{T}, AbstractMatrix{T}, AbstractArray{T, 3}}} where T<:Real","page":"Volumetric data","title":"WannierIO.write_cube","text":"write_cube(filename, filename, atom_positions, atom_numbers, origin, span_vectors, W)\n\nWrite cube file.\n\nArguments\n\natom_positions: 3 * n_atoms, Å, cartesian coordinates\natom_numbers: n_atoms, atomic numbers\norigin: 3, Å, origin of the grid\nspan_vectors: 3 * 3, Å, each column is a spanning vector\nW: nx * ny * nz, volumetric data\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#Wannier90-files","page":"Wannier90","title":"Wannier90 files","text":"","category":"section"},{"location":"api/w90/","page":"Wannier90","title":"Wannier90","text":"CurrentModule = WannierIO","category":"page"},{"location":"api/w90/","page":"Wannier90","title":"Wannier90","text":"warning: Warning\nSome of the functions, e.g. read_amn, write_amn, read_chk, write_chk, etc., support reading/writing Fortran unformatted files. However, the Fortran unformatted files are machine and compiler dependent. Therefore, it is not guaranteed that these functions work for all the cases. Currently, the functions are tested on the following platforms:Linux + gfortran 11.2","category":"page"},{"location":"api/w90/#Contents","page":"Wannier90","title":"Contents","text":"","category":"section"},{"location":"api/w90/","page":"Wannier90","title":"Wannier90","text":"Pages = [\"w90.md\"]\nDepth = 2","category":"page"},{"location":"api/w90/#Index","page":"Wannier90","title":"Index","text":"","category":"section"},{"location":"api/w90/","page":"Wannier90","title":"Wannier90","text":"Pages = [\"w90.md\"]","category":"page"},{"location":"api/w90/#Read/write","page":"Wannier90","title":"Read/write","text":"","category":"section"},{"location":"api/w90/","page":"Wannier90","title":"Wannier90","text":"Modules = [WannierIO]\nPages   = [\n    \"w90/win.jl\",\n    \"w90/wout.jl\",\n    \"w90/amn.jl\",\n    \"w90/mmn.jl\",\n    \"w90/eig.jl\",\n    \"w90/spn.jl\",\n    \"w90/unk.jl\",\n    \"w90/nnkp.jl\",\n    \"w90/chk.jl\",\n    \"w90/tb.jl\",\n    \"w90/hh_r.jl\",\n    \"w90/band.jl\",\n]","category":"page"},{"location":"api/w90/#WannierIO._fix_win!-Tuple{Dict}","page":"Wannier90","title":"WannierIO._fix_win!","text":"_fix_win!(params)\n\nSanity check and add missing input parameters from a win file.\n\nSee also read_win.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_win_toml-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_win_toml","text":"Read a win file in TOML format.\n\nUsed only in tests.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_win_toml-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._write_win_toml","text":"Write a win file in TOML format.\n\nUsed only in tests. Currently the output file is not formatted nicely.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_win-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_win","text":"read_win(filename; fix_inputs=true)\n\nRead the input file of wannier90.\n\nArguments\n\nfilename: The name of the input file.\n\nKeyword Arguments\n\nfix_inputs: sanity check and fix the input parameters, e.g., set   num_bands = num_wann if num_bands is not specified,   convert atoms_cart always to atoms_frac, etc.   See also _fix_win!.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_win-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.write_win","text":"write_win(filename; kwargs...)\n\nWrite input parameters into a wannier90 win file.\n\nThe input parameters are keyword arguments, with key names same as that of wannier90.\n\nExamples\n\nusing WannierIO\n\nwrite_win(\n    \"silicon.win\";\n    num_wann=4,\n    num_bands=4,\n    # unit_cell_cart is a matrix, its columns are the lattice vectors in angstrom\n    unit_cell_cart=[\n        0.0      2.71527  2.71527\n        2.71527  0.0      2.71527\n        2.71527  2.71527  0.0\n    ],\n    # atoms_frac is a vector of pairs of atom_label and fractional coordinates\n    atoms_frac=[\n        :Si => [0.0, 0.0, 0.0],\n        :Si => [0.25, 0.25, 0.25],\n        # both `:Si` and `\"Si\"` are allowed\n        # \"Si\" => [0.25, 0.25, 0.25],\n    ],\n    # each element in projections will be written as a line in the win file\n    projections=[\n        \"random\",\n    ]\n    kpoint_path=[\n        [:G => [0.0, 0.0, 0.0], :X => [0.5, 0.0, 0.5]],\n        [:X => [0.5, 0.0, 0.5], :U => [0.625, 0.25, 0.625]],\n    ],\n    mp_grid=[2, 2, 2],\n    # kpoints is a matrix, its columns are the fractional coordinates\n    kpoints=[\n        [0.0, 0.0, 0.0],\n        [0.0, 0.0, 0.5],\n        [0.0, 0.5, 0.0],\n        [0.0, 0.5, 0.5],\n        [0.5, 0.0, 0.0],\n        [0.5, 0.0, 0.5],\n        [0.5, 0.5, 0.0],\n        [0.5, 0.5, 0.5],\n    ],\n    # additional parameters can be passed as keyword arguments, e.g.,\n    num_iter=500,\n)\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_wout-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_wout","text":"read_wout(filename::AbstractString)\n\nParse wout file.\n\nReturn\n\nlattice: in Å, each column is a lattice vector\natom_labels: atomic symbols\natom_positions: in fractional coordinates\ncenters: WF centers in Å\nspreads: WF spreads in Å^2\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_amn_bin-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_amn_bin","text":"_read_amn_bin(filename::AbstractString)\n\nRead Fortran binary (unformatted) amn file.\n\nUsing Fortran stream IO.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_amn_fmt-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_amn_fmt","text":"_read_amn_fmt(filename::AbstractString)\n\nRead Fortran formatted amn file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_amn_bin-Tuple{AbstractString, AbstractVector, AbstractString}","page":"Wannier90","title":"WannierIO._write_amn_bin","text":"Write A as Fortran unformatted file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_amn_fmt-Tuple{AbstractString, AbstractVector, AbstractString}","page":"Wannier90","title":"WannierIO._write_amn_fmt","text":"Write A in plain text format.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_amn-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_amn","text":"read_amn(filename::AbstractString)\n\nRead the amn file.\n\nReturn\n\nA: length-n_kpts vector, each element is a n_bands * n_wann matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_amn-Tuple{AbstractString, AbstractVector, AbstractString}","page":"Wannier90","title":"WannierIO.write_amn","text":"write_amn(filename, A, header; binary=false)\n\nWrite amn file.\n\nArguments\n\nfilename: output filename\nA: a length-n_kpts vector, each element is a n_bands * n_wann matrix\nheader: 1st line of the file\n\nKeyword arguments\n\nbinary: write as Fortran unformatted file\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_amn-Tuple{AbstractString, AbstractVector}","page":"Wannier90","title":"WannierIO.write_amn","text":"write_amn(filename, A)\n\nWrite amn file.\n\nDefault header is Created by WannierIO.jl CURRENT_DATE.\n\nArguments\n\nfilename: output filename\nA: a length-n_kpts vector, each element is a n_bands * n_wann matrix\n\nKeyword arguments\n\nbinary: write as Fortran unformatted file\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_mmn_bin-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_mmn_bin","text":"Read Fortran binary mmn file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_mmn_fmt-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_mmn_fmt","text":"Read plain text mmn file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_mmn_bin-Tuple{AbstractString, AbstractVector, AbstractVector, AbstractVector, AbstractString}","page":"Wannier90","title":"WannierIO._write_mmn_bin","text":"Write binary mmn file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_mmn_fmt-Tuple{AbstractString, AbstractVector, AbstractVector, AbstractVector, AbstractString}","page":"Wannier90","title":"WannierIO._write_mmn_fmt","text":"Write plain text mmn file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_mmn-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_mmn","text":"read_mmn(filename::AbstractString)\n\nRead mmn file.\n\nReturn\n\nM: length-n_kpts vector of n_bands * n_bands * n_bvecs arrays\nkpb_k: length-n_kpts vector of length-n_bvecs vector of integers\nkpb_b: length-n_kpts vector of length-n_bvecs vector of Vec3{Int} for bvectors\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_mmn","page":"Wannier90","title":"WannierIO.write_mmn","text":"write_mmn(filename, M, kpb_k, kpb_b, header; binary=false)\n\nWrite mmn file.\n\nArguments\n\nfilename: output file name\nM: length-n_kpts vector of n_bands * n_bands * n_bvecs arrays\nkpb_k: length-n_kpts vector of length-n_bvecs vector of integers\nkpb_b: length-n_kpts vector of length-n_bvecs vector of Vec3{Int} for bvectors\nheader: header string\n\nKeyword arguments\n\nbinary: if true write in Fortran binary format\n\n\n\n\n\n","category":"function"},{"location":"api/w90/#WannierIO._read_eig_bin-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_eig_bin","text":"Read binary eig file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_eig_fmt-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_eig_fmt","text":"Read plain text eig file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._reshape_eig-Tuple{AbstractVector{<:Integer}, AbstractVector{<:Integer}, AbstractVector{<:Real}}","page":"Wannier90","title":"WannierIO._reshape_eig","text":"Reshape a vector of eigenvalues into a matrix of eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_eig_bin-Tuple{AbstractString, AbstractVector}","page":"Wannier90","title":"WannierIO._write_eig_bin","text":"Write binary eig file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_eig_fmt-Tuple{AbstractString, AbstractVector}","page":"Wannier90","title":"WannierIO._write_eig_fmt","text":"Write plain text eig file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_eig-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_eig","text":"read_eig(filename::AbstractString)\n\nRead the eig file.\n\nReturn\n\nE: a lenth-n_kpts vector, each element is a length-n_bands vector\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_eig-Tuple{AbstractString, AbstractVector}","page":"Wannier90","title":"WannierIO.write_eig","text":"write_eig(filename::AbstractString, E::AbstractArray; binary=false)\n\nWrite eig file.\n\nArguments\n\nE: a lenth-n_kpts vector, each element is a length-n_bands vector\n\nKeyword arguments\n\nbinary: if true write in Fortran binary format\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_spn-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_spn","text":"read_spn(filename::AbstractString)\n\nRead the spn file.\n\nReturn a n_bands * n_bands * n_kpts * 3 array.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_spn-Union{Tuple{T}, Tuple{AbstractString, AbstractArray{T, 4}, AbstractString}} where T<:Complex","page":"Wannier90","title":"WannierIO.write_spn","text":"write_spn(filename::String, S::Array{Complex,4}, header::String)\n\nWrite the spn file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_spn-Union{Tuple{T}, Tuple{AbstractString, AbstractArray{T, 4}}} where T<:Complex","page":"Wannier90","title":"WannierIO.write_spn","text":"write_spn(filename::String, S::Array{Complex,4})\n\nWrite the spn file.\n\nThe header is \"Created by WannierIO.jl CURRENT_DATE\".\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_unk_bin-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_unk_bin","text":"Read binary unk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_unk_fmt-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_unk_fmt","text":"Read plain text unk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_unk_bin-Tuple{AbstractString, Integer, Array{<:Complex, 5}}","page":"Wannier90","title":"WannierIO._write_unk_bin","text":"Write binary unk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_unk_fmt-Tuple{AbstractString, Integer, Array{<:Complex, 5}}","page":"Wannier90","title":"WannierIO._write_unk_fmt","text":"Write plain text unk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_unk-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_unk","text":"read_unk(filename::AbstractString)\n\nRead UNK file for the periodic part of Bloch wavefunctions.\n\nReturn\n\nik: k-point index\nΨ: periodic part of Bloch wavefunctions in real space,   size = (n_gx, n_gy, n_gz, n_bands, n_spin)\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_unk-Tuple{AbstractString, Integer, Array}","page":"Wannier90","title":"WannierIO.write_unk","text":"write_unk(filename::AbstractString, ik::Integer, Ψ::Array{Complex,4}; binary=false)\n\nWrite UNK file for the periodic part of Bloch wavefunctions.\n\nArguments\n\nik: at which kpoint? start from 1\nΨ: Bloch wavefunctions, size(Ψ) = (n_gx, n_gy, n_gz, n_bands, n_spin)\n\nKeyword arguments\n\nbinary: write as Fortran unformatted file\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_nnkp_toml-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_nnkp_toml","text":"Read a nnkp file in TOML format.\n\nUsed only in tests.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_nnkp_toml-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._write_nnkp_toml","text":"Write a nnkp file in TOML format.\n\nUsed only in tests. Internally calls _write_win_toml.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_nnkp-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_nnkp","text":"read_nnkp(filename::AbstractString)\n\nRead the nnkp file.\n\nReturn\n\nrecip_lattice: each column is a reciprocal lattice vector\nkpoints: length-n_kpts vector of Vec3, in fractional coordinates\nkpb_k: length-n_kpts vector of length-n_bvecs vector of integers, index of kpoints\nkpb_b: length-n_kpts vector of length-n_bvecs vector of Vec3 for bvectors, fractional w.r.t recip_lattice\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_nnkp","page":"Wannier90","title":"WannierIO.write_nnkp","text":"write_nnkp(filename, bvectors::BVectors, n_wann)\n\nWrite a nnkp file that can be used by DFT codes, e.g., QE pw2wannier90.\n\nArguments\n\nrecip_lattice: each column is a reciprocal lattice vector\nkpoints: length-n_kpts vector of Vec3, in fractional coordinates\nkpb_k: length-n_kpts vector of length-n_bvecs vector of integers, index of kpoints\nkpb_b: length-n_kpts vector of length-n_bvecs vector of Vec3 for bvectors, fractional w.r.t recip_lattice\nn_wann: if given, write a auto_projections block\nexclude_bands: if given, write the specified band indexes in the exclude_bands block\n\nnote: Note\nOnly a preliminary version, use auto_projections.\n\n\n\n\n\n","category":"function"},{"location":"api/w90/#WannierIO.Chk","page":"Wannier90","title":"WannierIO.Chk","text":"Struct for storing matrices in seedname.chk file.\n\n\n\n\n\n","category":"type"},{"location":"api/w90/#Base.isapprox-Tuple{WannierIO.Chk, WannierIO.Chk}","page":"Wannier90","title":"Base.isapprox","text":"Compare two Chk objects.\n\nUsed in tests.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_chk_bin-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_chk_bin","text":"Read unformatted seedname.chk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._read_chk_fmt-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO._read_chk_fmt","text":"Read formatted seedname.chk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_chk_bin-Tuple{AbstractString, WannierIO.Chk}","page":"Wannier90","title":"WannierIO._write_chk_bin","text":"Write unformatted chk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO._write_chk_fmt-Tuple{AbstractString, WannierIO.Chk}","page":"Wannier90","title":"WannierIO._write_chk_fmt","text":"Write formatted chk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.get_U-Tuple{WannierIO.Chk}","page":"Wannier90","title":"WannierIO.get_U","text":"get_U(chk)\n\nExtract U matrices from Chk.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.get_Udis-Tuple{WannierIO.Chk}","page":"Wannier90","title":"WannierIO.get_Udis","text":"get_Udis(chk)\n\nExtract U matrices for disentanglement from Chk.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_chk-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_chk","text":"read_chk(filename::AbstractString)\n\nRead formatted or binary chk file.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_chk-Tuple{AbstractString, WannierIO.Chk}","page":"Wannier90","title":"WannierIO.write_chk","text":"write_chk(filename, chk::Chk)\n\nWrite formatted or binary chk file.\n\nKeyword arguments\n\nbinary: write as Fortran unformatted file\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_w90_tbdat-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_w90_tbdat","text":"read_w90_tbdat(filename)\n\nRead seedname_tb.dat.\n\nReturn\n\nlattice: each column is a lattice vector\nR: bmR vectors on which operators are defined\nN: degeneracies of bmR vectors\nH: Hamiltonian bmH(bmR)\nr: position operator\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_w90_wsvec-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_w90_wsvec","text":"read_w90_wsvec(filename::AbstractString)\n\nRead seedname_wsvec.dat.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_HH_R-Union{Tuple{IT}, Tuple{T}, Tuple{AbstractString, AbstractArray{T, 3}, AbstractMatrix{IT}}} where {T<:Complex, IT<:Integer}","page":"Wannier90","title":"WannierIO.write_HH_R","text":"write_HH_R(filename, H, R; N=nothing, header=nothing)\n\nWrite the real space Hamiltonian to a seedname_HH_R.dat file.\n\nArguments\n\nfilename: usually seedname_HH_R.dat\nH: a n_wann * n_wann * n_rvecs array of Hamiltonian\nR: a n_rvecs * 3 array of integers\n\nKeyword arguments\n\nN: a n_rvecs vector of integers, the degeneracy of each R vector\nheader: a string, the header of the file\n\nnote: Note\nWanier90 postw90.x has a hidden input parameter effective_model, setting it to true and postw90.x will read this HH_R.dat to fill the real space Hamiltonian, and do subsequent Wannier interpolation, e.g., in BoltzWann. However, the vanila postw90.x code does not take into account the degeneracy of R vectors, and also does not use MDRS interpolation. I have modified the postw90.x code to use MDRS, and also changed a bit the number of digits for the Hamiltonian in HH_R.dat, so that it is the same as the seedname_tb.dat file, i.e., from Fortran F12.6 to E15.8.\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_w90_band-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_w90_band","text":"read_w90_band(seedname::AbstractString)\n\nRead SEEDNAME_band.dat, SEEDNAME_band.kpt, SEEDNAME_band.labelinfo.dat.\n\nReturn\n\nkpoints: 3 * n_kpts, fractional coordinates\nE: length-n_kpts vector, each element is a length-n_bands vector of band energies\nx: n_kpts, x axis value, in cartesian length\nsymm_idx: index of high-symmetry points in seedname_band.dat\nsymm_label: name of high-symmetry points\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_w90_band_dat-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_w90_band_dat","text":"read_w90_band_dat(filename)\n\nRead seedname_band.dat file.\n\nReturn\n\nx: n_kpts, x axis value, in cartesian length\nE: length-n_kpts vector, each elemnt is a length-n_bands vector of band energies\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_w90_band_kpt-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_w90_band_kpt","text":"read_w90_band_kpt(filename)\n\nRead seedname_band.kpt file.\n\nReturn\n\nkpoints: a vector of length n_kpts, fractional coordinates\nweights: a vector of length n_kpts, weights of kpoints\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.read_w90_band_labelinfo-Tuple{AbstractString}","page":"Wannier90","title":"WannierIO.read_w90_band_labelinfo","text":"read_w90_band_labelinfo(filename::AbstractString)\n\nRead seedname_band.labelinfo file.\n\nReturn\n\nsymm_idx: index of high-symmetry points in seedname_band.dat\nsymm_label: name of high-symmetry points\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_w90_band-Tuple{AbstractString, Vararg{AbstractVector, 5}}","page":"Wannier90","title":"WannierIO.write_w90_band","text":"write_w90_band(seedname, kpoints, E, x, symm_idx, symm_label)\n\nWrite SEEDNAME_band.dat, SEEDNAME_band.kpt, SEEDNAME_band.labelinfo.dat.\n\nArguments\n\nseedname: seedname of SEEDNAME_band.dat, SEEDNAME_band.kpt, SEEDNAME_band.labelinfo.dat\nkpoints: length-n_kpts vector, fractional coordinates\nE: length-n_kpts vector, each element is a length-n_bands vector of band energies\nx: n_kpts, x axis value, in cartesian length\nsymm_idx: index of high-symmetry points in seedname_band.dat\nsymm_label: name of high-symmetry points\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_w90_band_dat-Tuple{AbstractString, AbstractVector{<:Real}, AbstractVector{<:AbstractVector{<:Real}}}","page":"Wannier90","title":"WannierIO.write_w90_band_dat","text":"write_w90_band_dat(filename, x, E)\n\nWrite seedname_band.dat file.\n\nArguments\n\nfilename: filename of seedname_band.dat\nx: n_kpts, x axis value, in cartesian length\nE: length-n_kpts vector, each element is a length-n_bands vector of band energies\n\n\n\n\n\n","category":"method"},{"location":"api/w90/#WannierIO.write_w90_band_kpt","page":"Wannier90","title":"WannierIO.write_w90_band_kpt","text":"write_w90_band_kpt(filename, kpoints, weights=nothing)\n\nWrite seedname_band.kpt file.\n\nArguments\n\nfilename: filename of seedname_band.kpt\nkpoints: length-n_kpts vector, fractional coordinates\nweights: n_kpts, optional, weights of kpoints\n\n\n\n\n\n","category":"function"},{"location":"api/w90/#WannierIO.write_w90_band_labelinfo-Tuple{AbstractString, AbstractVector{<:Integer}, AbstractVector{<:AbstractString}, AbstractVector{<:Real}, AbstractVector{<:StaticArraysCore.SVector{3, <:Real}}}","page":"Wannier90","title":"WannierIO.write_w90_band_labelinfo","text":"write_w90_band_labelinfo(filename, symm_idx, symm_label, x, kpoints)\n\nWrite seedname_band.labelinfo file.\n\nArguments\n\nfilename: filename of seedname_band.labelinfo\nsymm_idx: index of high-symmetry points in seedname_band.dat\nsymm_label: name of high-symmetry points\nx: n_kpts, x axis value, in cartesian length\nkpoints: length-n_kpts vector, fractional coordinates\n\n\n\n\n\n","category":"method"}]
}
